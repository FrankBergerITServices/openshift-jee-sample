apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: demojee-wildfly-postgresql
  annotations:
    version: 0.0.2
    openshift.io/display-name: DemoJee App + Wildfly + PostgreSQL
    description: Some demojee application from GitHub on Wildfly using PostgreSQL as database
    tags: "builder,java"
  message: A new demojee app was created
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      template.openshift.io/expose-database_name: "{.data[database-name]}"
      template.openshift.io/expose-password: "{.data[database-password]}"
      template.openshift.io/expose-username: "{.data[database-user]}"
  stringData:
    database-name: "${POSTGRESQL_DATABASE}"
    database-password: "${POSTGRESQL_PASSWORD}"
    database-user: "${POSTGRESQL_USER}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: wildflydemo
    name: wildflydemo
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: wildflydemo
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      app: postgresql-persistent
      template: postgresql-persistent-template
    name: postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: postgresql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: wildflydemo
    name: wildflydemo
  spec:
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: wildflydemo
      weight: 100
    wildcardPolicy: None
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    generation: 1
    labels:
      app: wildflydemo
    name: wildflydemo
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: docker-registry.default.svc:5000/demojee/wildflydemo:latest
      generation: null
      importPolicy: {}
      name: latest
      referencePolicy:
        type: ""
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: wildflydemo
    name: wildflydemo
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: wildflydemo:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: https://github.com/FrankBergerITServices/openshift-jee-sample.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: jboss-eap72-openshift:latest
          namespace: openshift
      type: Source
    triggers:
    - generic:
        secret: 51391133a5454bc6
      type: Generic
    - github:
        secret: 105a9af3504117ef
      type: GitHub
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 2
    labels:
      app: wildflydemo
    name: wildflydemo
  spec:
    replicas: 1
    selector:
      deploymentconfig: wildflydemo
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: wildflydemo
          deploymentconfig: wildflydemo
      spec:
        containers:
        - env:
          - name: DB_SERVICE_PREFIX_MAPPING
            value: wildflydemo-POSTGRESQL=DB
          - name: DB_JNDI
            value: java:jboss/datasources/ExampleDS
          - name: WILDFLYDEMO_POSTGRESQL_SERVICE_HOST
            value: ${POSTGRESQL_SERVICE_HOST}
          - name: WILDFLYDEMO_POSTGRESQL_SERVICE_PORT
            value: ${WILDFLYDEMO_POSTGRESQL_SERVICE_PORT}
          - name: DB_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: postgresql
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: postgresql
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: postgresql
          imagePullPolicy: Always
          name: wildflydemo
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8787
            protocol: TCP            
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - wildflydemo
        from:
          kind: ImageStreamTag
          name: wildflydemo:latest
          namespace: demojee
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    generation: 2
    labels:
      app: postgresql-persistent
      template: postgresql-persistent-template
    name: postgresql
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: postgresql
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: postgresql
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: postgresql
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:10
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: "512Mi"
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: "openshift"
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: "postgresql"
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  from: "user[A-Z0-9]{3}"
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: "sampledb"
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: "1Gi"
- description: Version of PostgreSQL image to be used (10 or latest).
  displayName: Version of PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: "10"
